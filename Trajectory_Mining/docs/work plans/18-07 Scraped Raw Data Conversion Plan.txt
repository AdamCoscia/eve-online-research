# Produces three files: Useful_Killmails.csv, Unusable_Killmails.csv, Unrecognizable_Killmails.csv

NOTE: 'Raw_Data' is initial state of each file

## First Pass - 'Raw_Data' - type checking
> Required line.keys: {
>   'killmail_id': `int`,
>   'killmail_time': `str`,
>   'victim': `dict`,
>   'attackers': `list`,
>   'solar_system': `int`,
>   'zkb': `dict`}
> Required 'killmail_time' format: "xxxx-xx-xxTxx:xx:xxZ"

Each line in 'Raw_Data' is parsed; if any step gets SyntaxError, ValueError, KeyError, or doesn't match required value, then line is sent to 'Unrecognizable_Killmails'(`list`) with added field -> ("Reason", "Pass Failed:{pass#} | Failed Key:{key}") and steps start over. Otherwise, line is sent to 'Possible_Killmails'(`list`). Finally, 'Unrecognizable_Killmails' is written to file and closed, and 'Raw_Data' is deleted.

Lines are checked in following order:
1. type(ast.literal_eval(line))                  -> Allowed: `dict`
2. type(ast.literal_eval(line['killmail_id']))   -> Allowed: `int`
3. type(ast.literal_eval(line['victim']))        -> Allowed: `dict`
4. type(ast.literal_eval(line['attackers']))     -> Allowed: `list`
5. type(ast.literal_eval(line['solar_system']))  -> Allowed: `int`
6. type(ast.literal_eval(line['zkb']))           -> Allowed: `dict`
7. type(ast.literal_eval(line['killmail_time'])) -> Allowed: `str`
8. format line['killmail_time'] == "xxxx-xx-xxTxx:xx:xxZ"


## Second Pass - 'Possible_Killmails' - Nested type checking
> Required victim.keys: {
>   'ship_type_id': `int`,
>   'character_id': `int`,
>   'items': `list`}
> Required attackers.keys: {
>   'final_blow': `bool`,
>   'damage_done': `int`,
>   'character_id': `int`,
>   'ship_type_id': `int`}
> Required zkb.keys: {
>   'npc': `bool`}

Each line and attacker in 'Possible_Killmails' is parsed; if any step gets SyntaxError, ValueError, KeyError, or doesn't match required value, then line is sent to 'Unusable_Killmails' with added field -> ("Reason", "Pass Failed:{pass#} | Failed Key:{key}") and steps start over.

Lines are checked in following order:
1. type(ast.literal_eval(line['victim']['ship_type_id'])) -> Allowed: `int`
2. type(ast.literal_eval(line['victim']['character_id'])) -> Allowed: `int`
3. type(ast.literal_eval(line['victim']['items']))        -> Allowed: `list`
4. type(ast.literal_eval(line['zkb']['npc']))             -> Allowed: `bool`
5. if line['zkb']['npc'] True, then get next line. Else, continue.
6. type(ast.literal_eval(attacker['final_blow']))   -> Allowed: `bool`
7. type(ast.literal_eval(attacker['damage_done']))  -> Allowed: `int`
8. type(ast.literal_eval(attacker['character_id'])) -> Allowed: `int`
9. type(ast.literal_eval(attacker['ship_type_id'])) -> Allowed: `int`


## Third Pass - 'Possible_Killmails' - Item type and Parameter Checking
> Required victim.items.keys: {
>   'item_type_id': `int`,
>   'flag': `int`,
>   'quantity_destroyed': `int`,
>   'quantity_dropped': `int`,
>   'total_price': [`float`, `int`]}
> Required victim.items.values: {
>   'allowed_flags': set(11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,
>                        24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34)}

Each item in each line in 'Possible_Killmails' is parsed; if any step gets SyntaxError, ValueError, KeyError, or doesn't match required value, then line is sent to 'Unusable_Killmails' with added field -> ("Reason", "Pass Failed:{pass#} | Failed Key:{key}") and steps start over. If, after parsing all items, victim.items is empty, line is sent to 'Unusable_Killmails' with added field -> ("Reason", "Pass Failed:{pass#} | No items"). Otherwise, line is sent to 'Useful_Killmails'. Finally, 'Useful_Killmails' is written to file and closed, 'Unusable_Killmails' is written to file and closed, and 'Possible_Killmails' is deleted.

Items are checked in following order:
1. if line['victim']['items'] == [], get next line. Else, get first item.
2. type(ast.literal_eval(item['item_type_id']))       -> Allowed: `int`
3. type(ast.literal_eval(item['flag']))               -> Allowed: `int`
4. type(ast.literal_eval(item['quantity_destroyed'])) -> Allowed: `int`
5. type(ast.literal_eval(item['quantity_dropped']))   -> Allowed: `int`
6. type(ast.literal_eval(item['total_price']))        -> Allowed: `int`, `float`
7. if item['flag'] not in 'allowed_flags', del item
8. After all item, if line['victim']['items'] == [], get next line. Else, send line.
